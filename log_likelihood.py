# -*- coding: utf-8 -*-
"""log_likelihood.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gNn5GPBnLpDpuQL_ohQgoI0KjN9lKFZf
"""

import numpy as np

def compute_loglikelihood(agent, dataset):
  log_likelihood = 0 
  placeholder_choice_prob = np.zeros(2)
  agent.initialize_new_session()

  for t in range(dataset['nTrials']):
    _, choice_prob = agent.get_choice()
    placeholder_choice_prob[1] = choice_prob
    placeholder_choice_prob[0] = 1 - placeholder_choice_prob[1]

    choice = dataset['choices'][t]
    reward = dataset['rewards'][t]

    choice_likelihood = placeholder_choice_prob[choice]
    log_likelihood = log_likelihood + np.log(choice_likelihood)

    agent.update(choice, reward, session_index = dataset['session_index'])

  return log_likelihood

def compute_normalized_loglikelihood(loglik_1, loglik_2, dataset):
  norm_loglik = np.exp((loglik_1 + loglik_2)/dataset['nTrials'])
  return norm_loglik

def create_total_log_likelihood(odd_agent_instance, even_agent_instance, odd_dataset, even_dataset, mouse_dataset):
  # agent-odd, dataset-odd
  loglik_odd_odd = compute_loglikelihood(agent=odd_agent_instance, dataset=odd_dataset)
  # agent-even, dataset-even
  loglik_even_even = compute_loglikelihood(agent=even_agent_instance, dataset=even_dataset)
  # Cross-validation (agent-odd, dataset-even)
  loglik_odd_even = compute_loglikelihood(agent=odd_agent_instance, dataset=even_dataset)
  # Cross-validation (agent-even, dataset-odd)
  loglik_even_odd = compute_loglikelihood(agent=even_agent_instance, dataset=odd_dataset)
  
  total_loglik_x_crossval = compute_normalized_loglikelihood(loglik_odd_odd, loglik_even_even, mouse_dataset)                                         
  total_loglik_crossval = compute_normalized_loglikelihood(loglik_odd_even, loglik_even_odd, mouse_dataset)

  return total_loglik_x_crossval, total_loglik_crossval

def create_crossval_plot(DFQ, model):
  diff_loglik_per_model = np.zeros(len(model))
  for i in range(len(DFQ)):
    diff_loglik_per_model[i]=((model[i]-DFQ[i])/DFQ[i])*100 
  return diff_loglik_per_model